INFO:root:architecture:AtlasNet_seed=0|task:Standard_Norm|kind:a_NA|source:pcs_1000|layer:c2|pooling:zscore_PCA|n_components:1000
INFO:root:c2
Loading catalog from entrypoints
Loading lookup from /home/wtownle1/env_dim/dim-powerlaw/lib/python3.7/site-packages/brainscore/lookup.csv
layers:   0%|          | 0/1 [00:00<?, ?it/s]INFO:model_tools.activations.core.ActivationsExtractorHelper:Running stimuli

activations:   0%|          | 0/3200 [00:00<?, ?it/s][AINFO:model_tools.activations.core.ActivationsExtractorHelper:Running stimuli
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])


activations:   0%|          | 0/1024 [00:00<?, ?it/s][A[A

activations:   6%|▋         | 64/1024 [00:00<00:06, 154.30it/s][A[A

activations:  12%|█▎        | 128/1024 [00:00<00:06, 129.44it/s][A[A

activations:  19%|█▉        | 192/1024 [00:01<00:07, 115.05it/s][A[A

activations:  25%|██▌       | 256/1024 [00:02<00:07, 104.94it/s][A[A

activations:  31%|███▏      | 320/1024 [00:03<00:07, 96.20it/s] [A[A

activations:  38%|███▊      | 384/1024 [00:03<00:07, 87.88it/s][A[A

activations:  44%|████▍     | 448/1024 [00:04<00:07, 78.37it/s][A[A

activations:  50%|█████     | 512/1024 [00:05<00:07, 72.91it/s][A[A

activations:  56%|█████▋    | 576/1024 [00:06<00:06, 68.84it/s][A[A

activations:  62%|██████▎   | 640/1024 [00:08<00:05, 64.74it/s][A[A

activations:  69%|██████▉   | 704/1024 [00:09<00:05, 60.87it/s][A[A

activations:  75%|███████▌  | 768/1024 [00:10<00:04, 54.66it/s][A[A

activations:  81%|████████▏ | 832/1024 [00:12<00:03, 51.83it/s][A[A

activations:  88%|████████▊ | 896/1024 [00:13<00:02, 50.13it/s][A[A

activations:  94%|█████████▍| 960/1024 [00:14<00:01, 48.66it/s][A[A

activations: 100%|██████████| 1024/1024 [00:16<00:00, 47.23it/s][A[Aactivations: 100%|██████████| 1024/1024 [00:16<00:00, 62.75it/s]
INFO:model_tools.activations.core.ActivationsExtractorHelper:Packaging into assembly
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])


layer packaging:   0%|          | 0/1 [00:00<?, ?it/s][A[A

layer packaging: 100%|██████████| 1/1 [00:02<00:00,  2.73s/it][A[Alayer packaging: 100%|██████████| 1/1 [00:02<00:00,  2.73s/it]
imagenet dict [0] shape
(1000, 1000, 24, 24)


layer principal components:   0%|          | 0/1 [00:00<?, ?it/s][A[A

layer principal components: 100%|██████████| 1/1 [01:11<00:00, 71.42s/it][A[Alayer principal components: 100%|██████████| 1/1 [01:11<00:00, 71.43s/it]

activations:   2%|▏         | 64/3200 [01:58<1:36:43,  1.85s/it][A
activations:   4%|▍         | 128/3200 [01:59<39:35,  1.29it/s] [A
activations:   6%|▌         | 192/3200 [02:00<21:29,  2.33it/s][A
activations:   8%|▊         | 256/3200 [02:02<13:05,  3.75it/s][A
activations:  10%|█         | 320/3200 [02:03<08:31,  5.63it/s][A
activations:  12%|█▏        | 384/3200 [02:04<05:48,  8.09it/s][A
activations:  14%|█▍        | 448/3200 [02:05<04:05, 11.19it/s][A
activations:  16%|█▌        | 512/3200 [02:06<03:00, 14.92it/s][A
activations:  18%|█▊        | 576/3200 [02:08<02:16, 19.24it/s][A
activations:  20%|██        | 640/3200 [02:09<01:46, 23.95it/s][A
activations:  22%|██▏       | 704/3200 [02:10<01:26, 28.70it/s][A
activations:  24%|██▍       | 768/3200 [02:11<01:13, 33.24it/s][A
activations:  26%|██▌       | 832/3200 [02:12<01:03, 37.47it/s][A
activations:  28%|██▊       | 896/3200 [02:14<00:58, 39.67it/s][A
activations:  30%|███       | 960/3200 [02:15<00:52, 42.83it/s][A
activations:  32%|███▏      | 1024/3200 [02:16<00:47, 45.72it/s][A
activations:  34%|███▍      | 1088/3200 [02:17<00:44, 47.90it/s][A
activations:  36%|███▌      | 1152/3200 [02:19<00:43, 47.24it/s][A
activations:  38%|███▊      | 1216/3200 [02:20<00:40, 49.16it/s][A
activations:  40%|████      | 1280/3200 [02:21<00:37, 50.61it/s][A
activations:  42%|████▏     | 1344/3200 [02:22<00:35, 51.62it/s][A
activations:  44%|████▍     | 1408/3200 [02:24<00:34, 52.38it/s][A
activations:  46%|████▌     | 1472/3200 [02:25<00:32, 52.50it/s][A
activations:  48%|████▊     | 1536/3200 [02:26<00:31, 53.00it/s][A
activations:  50%|█████     | 1600/3200 [02:27<00:29, 53.41it/s][A
activations:  52%|█████▏    | 1664/3200 [02:28<00:28, 53.65it/s][A
activations:  54%|█████▍    | 1728/3200 [02:30<00:27, 53.08it/s][A
activations:  56%|█████▌    | 1792/3200 [02:31<00:26, 53.23it/s][A
activations:  58%|█████▊    | 1856/3200 [02:32<00:25, 52.63it/s][A
activations:  60%|██████    | 1920/3200 [02:33<00:24, 52.38it/s][A
activations:  62%|██████▏   | 1984/3200 [02:35<00:23, 52.14it/s][A
activations:  64%|██████▍   | 2048/3200 [02:36<00:21, 52.65it/s][A
activations:  66%|██████▌   | 2112/3200 [02:37<00:20, 52.13it/s][A
activations:  68%|██████▊   | 2176/3200 [02:38<00:19, 52.65it/s][A
activations:  70%|███████   | 2240/3200 [02:39<00:18, 53.01it/s][A
activations:  72%|███████▏  | 2304/3200 [02:41<00:16, 53.32it/s][A
activations:  74%|███████▍  | 2368/3200 [02:42<00:16, 51.94it/s][A
activations:  76%|███████▌  | 2432/3200 [02:43<00:14, 52.01it/s][A
activations:  78%|███████▊  | 2496/3200 [02:44<00:13, 52.54it/s][A
activations:  80%|████████  | 2560/3200 [02:45<00:12, 52.82it/s][A
activations:  82%|████████▏ | 2624/3200 [02:47<00:10, 53.13it/s][A
activations:  84%|████████▍ | 2688/3200 [02:48<00:09, 51.43it/s][A
activations:  86%|████████▌ | 2752/3200 [02:49<00:08, 51.97it/s][A
activations:  88%|████████▊ | 2816/3200 [02:50<00:07, 52.49it/s][A
activations:  90%|█████████ | 2880/3200 [02:52<00:06, 52.93it/s][A
activations:  92%|█████████▏| 2944/3200 [02:53<00:04, 53.09it/s][A
activations:  94%|█████████▍| 3008/3200 [02:54<00:03, 53.32it/s][A
activations:  96%|█████████▌| 3072/3200 [02:55<00:02, 53.23it/s][A
activations:  98%|█████████▊| 3136/3200 [02:56<00:01, 52.99it/s][A
activations: 100%|██████████| 3200/3200 [02:58<00:00, 53.36it/s][Aactivations: 100%|██████████| 3200/3200 [02:58<00:00, 17.98it/s]
INFO:model_tools.activations.core.ActivationsExtractorHelper:Packaging into assembly
zscore
activations zcore shape:
(1000, 576000)
pca eigenvalues:
(1000, 576000)
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])
conv1 torch.Size([64, 24, 96, 96])
mp1 torch.Size([64, 24, 32, 32])
conv2 torch.Size([64, 1000, 24, 24])
mp2 torch.Size([64, 1000, 12, 12])
output torch.Size([64, 1000, 12, 12])

layer packaging:   0%|          | 0/1 [00:00<?, ?it/s][Alayer packaging: 100%|██████████| 1/1 [00:00<00:00, 64.93it/s]

cross-validation:   0%|          | 0/10 [00:00<?, ?it/s][A
cross-validation:  10%|█         | 1/10 [00:01<00:14,  1.61s/it][A
cross-validation:  20%|██        | 2/10 [00:03<00:12,  1.61s/it][A
cross-validation:  30%|███       | 3/10 [00:04<00:11,  1.61s/it][A
cross-validation:  40%|████      | 4/10 [00:06<00:09,  1.61s/it][A
cross-validation:  50%|█████     | 5/10 [00:08<00:08,  1.60s/it][A
cross-validation:  60%|██████    | 6/10 [00:09<00:06,  1.59s/it][A
cross-validation:  70%|███████   | 7/10 [00:11<00:04,  1.60s/it][A
cross-validation:  80%|████████  | 8/10 [00:12<00:03,  1.60s/it][A
cross-validation:  90%|█████████ | 9/10 [00:14<00:01,  1.59s/it][A
cross-validation: 100%|██████████| 10/10 [00:15<00:00,  1.59s/it][Across-validation: 100%|██████████| 10/10 [00:15<00:00,  1.60s/it]
layers: 100%|██████████| 1/1 [03:14<00:00, 194.39s/it]layers: 100%|██████████| 1/1 [03:14<00:00, 194.39s/it]
main total runtime: 0:03:22.197429
