Traceback (most recent call last):
  File "/home/wtownle1/dimensionality_powerlaw/env/dim-powerlaw/lib/python3.7/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/home/wtownle1/dimensionality_powerlaw/env/dim-powerlaw/lib/python3.7/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/home/wtownle1/dimensionality_powerlaw/scripts/compute_eigenspectra.py", line 78, in <module>
    main(dataset=args.dataset, data_dir=args.data_dir, pooling=args.pooling, grayscale=args.grayscale, debug=args.debug)
  File "/home/wtownle1/dimensionality_powerlaw/utils.py", line 29, in wrap
    result = func(*args, **kwargs)
  File "/home/wtownle1/dimensionality_powerlaw/scripts/compute_eigenspectra.py", line 26, in main
    for model, layers in get_activation_models():
  File "/home/wtownle1/dimensionality_powerlaw/activation_models/generators.py", line 62, in get_activation_models
    for model, layers in untrained_models():
  File "/home/wtownle1/dimensionality_powerlaw/activation_models/generators.py", line 147, in untrained_models
    model.apply(sparse)
  File "/home/wtownle1/dimensionality_powerlaw/env/dim-powerlaw/lib/python3.7/site-packages/torch/nn/modules/module.py", line 728, in apply
    module.apply(fn)
  File "/home/wtownle1/dimensionality_powerlaw/env/dim-powerlaw/lib/python3.7/site-packages/torch/nn/modules/module.py", line 729, in apply
    fn(self)
  File "/home/wtownle1/dimensionality_powerlaw/activation_models/generators.py", line 122, in sparse
    nn.init.sparse_(m.weight, sparsity=s, std=0.05)
  File "/home/wtownle1/dimensionality_powerlaw/env/dim-powerlaw/lib/python3.7/site-packages/torch/nn/init.py", line 516, in sparse_
    raise ValueError("Only tensors with 2 dimensions are supported")
ValueError: Only tensors with 2 dimensions are supported
